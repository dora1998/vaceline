'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.Tokenizer = exports.getJoinedRegExp = void 0

var _createError = require('../create-error')

var _operators = require('./operators')

var _debug = require('../../utils/debug')

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    })
  } else {
    obj[key] = value
  }
  return obj
}

const debug = (0, _debug.buildDebug)('tokenize')
const debugToken = debug.extend('token')
const debugRaw = debug.extend('raw')
const symbols = [';', ':', '.', ',', '/', '{', '}', '(', ')', '+']

const escapeRegExp = (s) =>
  s instanceof RegExp ? s.source : s.replace(/[-\\^$*+?.()|[\]{}]/g, '\\$&')

const getJoinedRegExp = (s) => s.map(escapeRegExp).join('|')

exports.getJoinedRegExp = getJoinedRegExp
const splitters = [
  /* spaces         */
  / +/,
  /* tabs           */
  /\t+/,
  /* newline        */
  '\n',
  /* line comment   */
  /#[^\n]*|\/\/[^\n]*/,
  /* inline comment */
  /\/\*[\s\S]*\*\//,
  /* string         */
  /"[^\n]*?"/,
  /* multiline str  */
  /{"[\s\S]*?"}/,
  /* ident          */
  /[A-z][A-z\d-_]*/,
  /* numeric        */
  /[\d][\d.]+%?/,
  ..._operators.operators,
  ...symbols,
]
const matchers = {
  symbols: new Set(symbols),
  operators: new Set(_operators.operators),
}
const reSplitter = new RegExp('(' + getJoinedRegExp(splitters) + ')')

class Tokenizer {
  constructor(raw /* opts: { keywords?: Array<string> } = {} */) {
    _defineProperty(this, 'raw', void 0)

    _defineProperty(this, 'source', void 0)

    this.raw = raw
    this.source = raw.split(reSplitter)

    if (debugRaw.enabled) {
      debugRaw(this.source.filter((t) => !/^\s*$/.test(t)))
    }
  }

  tokenize() {
    const source = this.source
    const tokens = []
    let cur = 0
    let offset = 0
    let line = 1
    let column = 1

    while (cur < source.length) {
      const str = source[cur++]

      if (!str) {
        continue
      } // only whitespaces or tabs

      if (/^( |\t)/.test(str)) {
        offset += str.length
        column += str.length
        continue
      } // newline

      if (str === '\n') {
        offset += str.length
        line++
        column = 1
        continue
      }

      let err = undefined
      /** determine token start */

      const startOffset = offset
      const startLine = line
      const startColumn = column
      /** determine token type */

      let type

      if (matchers.symbols.has(str)) {
        type = 'symbol'
      } else if (matchers.operators.has(str)) {
        type = 'operator'
      } else if (/^(true|false)$/.test(str)) {
        type = 'boolean'
      } else if (str.startsWith('"')) {
        type = 'string'

        if (!str.endsWith('"') || str === '"') {
          err =
            'Invalid token (string may have newlines inside normal quotes, use `{" "}`)'
        }
      } else if (str.startsWith('{"')) {
        type = 'string' // string can have newline inside

        const lines = str.split('\n')
        line += lines.length - 1
        column = lines[lines.length - 1].length - (str.length - 1)
      } else if (/^[\d.]+%?$/.test(str)) {
        type = 'numeric'
      } else if (/^(#|\/\/|\/\*)/.test(str)) {
        type = 'comment'
      } else {
        type = 'ident'

        if (!/^[A-Za-z_][A-Za-z\d.-_]*/.test(str)) {
          err = `Invalid token: '${str}'`
        }
      }
      /** update position */

      offset += str.length
      column += str.length
      /** determine token end */

      const endOffset = offset - 1
      const endLine = line
      const endColumn = column - 1

      if (err) {
        throw (0, _createError.createError)(
          this.raw,
          err,
          {
            offset: startOffset,
            line: startLine,
            column: startColumn,
          },
          {
            offset: endOffset,
            line: endLine,
            column,
          }
        )
      }

      const token = {
        type,
        value: str,
        loc: {
          start: {
            offset: startOffset,
            line: startLine,
            column: startColumn,
          },
          end: {
            offset: endOffset,
            line: endLine,
            column: endColumn,
          },
        },
      }

      if (debugToken.enabled) {
        debugToken(`${token.type}: ${token.value}`)
      }

      tokens.push(token)
    }

    return tokens
  }
}

exports.Tokenizer = Tokenizer
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
