'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.parseExpr = parseExpr

var _token = require('../../utils/token')

var _operator = require('./operator')

var _humble = require('./humble')

function parseExpr(p, token = p.read(), shortcut = false) {
  const expr = (0, _operator.parseOperatorExpr)(p, token)
  if (shortcut) return expr

  if ((0, _token.isToken)(token, 'symbol', ';')) {
    return expr
  }

  return p.parseNode(p.getCurrentToken(), () => {
    let backup = p.getCursor()
    const buf = [expr]
    let nextToken = p.peek()

    while (nextToken) {
      p.take()

      if ((0, _token.isToken)(nextToken, 'symbol', ';')) {
        break
      }

      if ((0, _token.isToken)(nextToken, 'symbol', '+')) {
        nextToken = p.read()
      }

      try {
        const expr = (0, _humble.parseHumbleExpr)(p, nextToken)
        buf.push(expr)
        backup = p.getCursor()
      } catch (err) {
        if (err instanceof SyntaxError) {
          break
        } else {
          throw err
        }
      }

      nextToken = p.peek()
    } // backtrack to the backed-up cursor

    p.jumpTo(backup) // the next token wasn't an expression

    if (buf.length === 1) {
      return expr
    }

    return {
      type: 'ConcatExpression',
      body: buf,
    }
  })
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYXJzZXIvZXhwcmVzc2lvbi9pbmRleC50cyJdLCJuYW1lcyI6WyJwYXJzZUV4cHIiLCJwIiwidG9rZW4iLCJyZWFkIiwic2hvcnRjdXQiLCJleHByIiwicGFyc2VOb2RlIiwiZ2V0Q3VycmVudFRva2VuIiwiYmFja3VwIiwiZ2V0Q3Vyc29yIiwiYnVmIiwibmV4dFRva2VuIiwicGVlayIsInRha2UiLCJwdXNoIiwiZXJyIiwiU3ludGF4RXJyb3IiLCJqdW1wVG8iLCJsZW5ndGgiLCJ0eXBlIiwiYm9keSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUlBOztBQUNBOztBQVlPLFNBQVNBLFNBQVQsQ0FDTEMsQ0FESyxFQUVMQyxLQUFZLEdBQUdELENBQUMsQ0FBQ0UsSUFBRixFQUZWLEVBR0xDLFFBQVEsR0FBRyxLQUhOLEVBSWdCO0FBQ3JCLFFBQU1DLElBQUksR0FBRyxpQ0FBa0JKLENBQWxCLEVBQXFCQyxLQUFyQixDQUFiO0FBRUEsTUFBSUUsUUFBSixFQUFjLE9BQU9DLElBQVA7O0FBRWQsTUFBSSxvQkFBUUgsS0FBUixFQUFlLFFBQWYsRUFBeUIsR0FBekIsQ0FBSixFQUFtQztBQUNqQyxXQUFPRyxJQUFQO0FBQ0Q7O0FBRUQsU0FBT0osQ0FBQyxDQUFDSyxTQUFGLENBQVlMLENBQUMsQ0FBQ00sZUFBRixFQUFaLEVBQWlDLE1BQU07QUFDNUMsUUFBSUMsTUFBTSxHQUFHUCxDQUFDLENBQUNRLFNBQUYsRUFBYjtBQUVBLFVBQU1DLEdBQUcsR0FBRyxDQUFDTCxJQUFELENBQVo7QUFFQSxRQUFJTSxTQUFTLEdBQUdWLENBQUMsQ0FBQ1csSUFBRixFQUFoQjs7QUFFQSxXQUFPRCxTQUFQLEVBQWtCO0FBQ2hCVixNQUFBQSxDQUFDLENBQUNZLElBQUY7O0FBRUEsVUFBSSxvQkFBUUYsU0FBUixFQUFtQixRQUFuQixFQUE2QixHQUE3QixDQUFKLEVBQXVDO0FBQ3JDO0FBQ0Q7O0FBRUQsVUFBSSxvQkFBUUEsU0FBUixFQUFtQixRQUFuQixFQUE2QixHQUE3QixDQUFKLEVBQXVDO0FBQ3JDQSxRQUFBQSxTQUFTLEdBQUdWLENBQUMsQ0FBQ0UsSUFBRixFQUFaO0FBQ0Q7O0FBRUQsVUFBSTtBQUNGLGNBQU1FLElBQUksR0FBRyw2QkFBZ0JKLENBQWhCLEVBQW1CVSxTQUFuQixDQUFiO0FBQ0FELFFBQUFBLEdBQUcsQ0FBQ0ksSUFBSixDQUFTVCxJQUFUO0FBQ0FHLFFBQUFBLE1BQU0sR0FBR1AsQ0FBQyxDQUFDUSxTQUFGLEVBQVQ7QUFDRCxPQUpELENBSUUsT0FBT00sR0FBUCxFQUFZO0FBQ1osWUFBSUEsR0FBRyxZQUFZQyxXQUFuQixFQUFnQztBQUM5QjtBQUNELFNBRkQsTUFFTztBQUNMLGdCQUFNRCxHQUFOO0FBQ0Q7QUFDRjs7QUFFREosTUFBQUEsU0FBUyxHQUFHVixDQUFDLENBQUNXLElBQUYsRUFBWjtBQUNELEtBL0IyQyxDQWlDNUM7OztBQUNBWCxJQUFBQSxDQUFDLENBQUNnQixNQUFGLENBQVNULE1BQVQsRUFsQzRDLENBb0M1Qzs7QUFDQSxRQUFJRSxHQUFHLENBQUNRLE1BQUosS0FBZSxDQUFuQixFQUFzQjtBQUNwQixhQUFPYixJQUFQO0FBQ0Q7O0FBRUQsV0FBTztBQUFFYyxNQUFBQSxJQUFJLEVBQUUsa0JBQVI7QUFBNEJDLE1BQUFBLElBQUksRUFBRVY7QUFBbEMsS0FBUDtBQUNELEdBMUNNLENBQVA7QUEyQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHByZXNzaW9uLCBMb2NhdGVkIH0gZnJvbSAnLi4vLi4vbm9kZXMnXG5pbXBvcnQgeyBpc1Rva2VuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdG9rZW4nXG5cbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi4vdG9rZW5pemVyJ1xuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSAnLi4nXG5pbXBvcnQgeyBwYXJzZU9wZXJhdG9yRXhwciB9IGZyb20gJy4vb3BlcmF0b3InXG5pbXBvcnQgeyBwYXJzZUh1bWJsZUV4cHIgfSBmcm9tICcuL2h1bWJsZSdcblxuLy8gaW1wb3J0IHsgYnVpbGREZWJ1ZyB9IGZyb20gJy4uLy4uL3V0aWxzL2RlYnVnJ1xuLy8gY29uc3QgZGVidWcgPSBidWlsZERlYnVnKCdwYXJzZXInLCAnZXhwcmVzc2lvbicpXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhY2s8VD4ge1xuICBbSTogbnVtYmVyXTogVFxuICBwdXNoOiBBcnJheTxUPlsncHVzaCddXG4gIHBvcDogQXJyYXk8VD5bJ3BvcCddXG4gIGxlbmd0aDogQXJyYXk8VD5bJ2xlbmd0aCddXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4cHIoXG4gIHA6IFBhcnNlcixcbiAgdG9rZW46IFRva2VuID0gcC5yZWFkKCksXG4gIHNob3J0Y3V0ID0gZmFsc2Vcbik6IExvY2F0ZWQ8RXhwcmVzc2lvbj4ge1xuICBjb25zdCBleHByID0gcGFyc2VPcGVyYXRvckV4cHIocCwgdG9rZW4pXG5cbiAgaWYgKHNob3J0Y3V0KSByZXR1cm4gZXhwclxuXG4gIGlmIChpc1Rva2VuKHRva2VuLCAnc3ltYm9sJywgJzsnKSkge1xuICAgIHJldHVybiBleHByXG4gIH1cblxuICByZXR1cm4gcC5wYXJzZU5vZGUocC5nZXRDdXJyZW50VG9rZW4oKSwgKCkgPT4ge1xuICAgIGxldCBiYWNrdXAgPSBwLmdldEN1cnNvcigpXG5cbiAgICBjb25zdCBidWYgPSBbZXhwcl1cblxuICAgIGxldCBuZXh0VG9rZW4gPSBwLnBlZWsoKVxuXG4gICAgd2hpbGUgKG5leHRUb2tlbikge1xuICAgICAgcC50YWtlKClcblxuICAgICAgaWYgKGlzVG9rZW4obmV4dFRva2VuLCAnc3ltYm9sJywgJzsnKSkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNUb2tlbihuZXh0VG9rZW4sICdzeW1ib2wnLCAnKycpKSB7XG4gICAgICAgIG5leHRUb2tlbiA9IHAucmVhZCgpXG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGV4cHIgPSBwYXJzZUh1bWJsZUV4cHIocCwgbmV4dFRva2VuKVxuICAgICAgICBidWYucHVzaChleHByKVxuICAgICAgICBiYWNrdXAgPSBwLmdldEN1cnNvcigpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFN5bnRheEVycm9yKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBlcnJcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXh0VG9rZW4gPSBwLnBlZWsoKVxuICAgIH1cblxuICAgIC8vIGJhY2t0cmFjayB0byB0aGUgYmFja2VkLXVwIGN1cnNvclxuICAgIHAuanVtcFRvKGJhY2t1cClcblxuICAgIC8vIHRoZSBuZXh0IHRva2VuIHdhc24ndCBhbiBleHByZXNzaW9uXG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBleHByXG4gICAgfVxuXG4gICAgcmV0dXJuIHsgdHlwZTogJ0NvbmNhdEV4cHJlc3Npb24nLCBib2R5OiBidWYgfVxuICB9KVxufVxuIl19
