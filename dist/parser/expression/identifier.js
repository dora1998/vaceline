'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.parseId = parseId
exports.parseIdentifier = parseIdentifier

var _token = require('../../utils/token')

var _createError = require('../create-error')

function parseId(p, token, base = parseIdentifier(p, token)) {
  if ((0, _token.isToken)(p.peek(), 'symbol', '.')) {
    p.take()
    return parseId(p, undefined, parseMember(p, base))
  }

  if ((0, _token.isToken)(p.peek(), 'symbol', ':')) {
    p.take() // return the expression here because there won't be any recursive pattern

    return parseValuePair(p, base)
  }

  return base
}

function parseIdentifier(p, token = p.read()) {
  return p.parseNode(token, () => {
    if (token.type !== 'ident') {
      throw (0, _createError.createError)(
        p.source,
        'Expected one of [Identifier]',
        token.loc.start,
        token.loc.end
      )
    }

    return {
      type: 'Identifier',
      name: token.value,
    }
  })
}

function parseMember(p, base) {
  return p.parseNode(p.read(), ({ token }) => {
    const member = p.parseNode(token, () => ({
      type: 'Identifier',
      name: token.value,
    }))
    return {
      type: 'Member',
      base,
      member,
      loc: {
        start: base.loc.start,
        end: member.loc.end,
      },
    }
  })
}

function parseValuePair(p, base) {
  return p.parseNode(p.read(), ({ token }) => {
    const name = p.parseNode(token, () => ({
      type: 'Identifier',
      name: token.value,
    }))
    return {
      type: 'ValuePair',
      base,
      name,
      loc: {
        start: base.loc.start,
        end: name.loc.end,
      },
    }
  })
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYXJzZXIvZXhwcmVzc2lvbi9pZGVudGlmaWVyLnRzIl0sIm5hbWVzIjpbInBhcnNlSWQiLCJwIiwidG9rZW4iLCJiYXNlIiwicGFyc2VJZGVudGlmaWVyIiwicGVlayIsInRha2UiLCJ1bmRlZmluZWQiLCJwYXJzZU1lbWJlciIsInBhcnNlVmFsdWVQYWlyIiwicmVhZCIsInBhcnNlTm9kZSIsInR5cGUiLCJzb3VyY2UiLCJsb2MiLCJzdGFydCIsImVuZCIsIm5hbWUiLCJ2YWx1ZSIsIm1lbWJlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFJTyxTQUFTQSxPQUFULENBQ0xDLENBREssRUFFTEMsS0FGSyxFQUdMQyxJQUFxQyxHQUFHQyxlQUFlLENBQUNILENBQUQsRUFBSUMsS0FBSixDQUhsRCxFQUlRO0FBQ2IsTUFBSSxvQkFBUUQsQ0FBQyxDQUFDSSxJQUFGLEVBQVIsRUFBa0IsUUFBbEIsRUFBNEIsR0FBNUIsQ0FBSixFQUFzQztBQUNwQ0osSUFBQUEsQ0FBQyxDQUFDSyxJQUFGO0FBQ0EsV0FBT04sT0FBTyxDQUFDQyxDQUFELEVBQUlNLFNBQUosRUFBZUMsV0FBVyxDQUFDUCxDQUFELEVBQUlFLElBQUosQ0FBMUIsQ0FBZDtBQUNEOztBQUVELE1BQUksb0JBQVFGLENBQUMsQ0FBQ0ksSUFBRixFQUFSLEVBQWtCLFFBQWxCLEVBQTRCLEdBQTVCLENBQUosRUFBc0M7QUFDcENKLElBQUFBLENBQUMsQ0FBQ0ssSUFBRixHQURvQyxDQUVwQzs7QUFDQSxXQUFPRyxjQUFjLENBQUNSLENBQUQsRUFBSUUsSUFBSixDQUFyQjtBQUNEOztBQUVELFNBQU9BLElBQVA7QUFDRDs7QUFFTSxTQUFTQyxlQUFULENBQ0xILENBREssRUFFTEMsS0FBWSxHQUFHRCxDQUFDLENBQUNTLElBQUYsRUFGVixFQUdnQjtBQUNyQixTQUFPVCxDQUFDLENBQUNVLFNBQUYsQ0FBWVQsS0FBWixFQUFtQixNQUFNO0FBQzlCLFFBQUlBLEtBQUssQ0FBQ1UsSUFBTixLQUFlLE9BQW5CLEVBQTRCO0FBQzFCLFlBQU0sOEJBQ0pYLENBQUMsQ0FBQ1ksTUFERSxFQUVKLDhCQUZJLEVBR0pYLEtBQUssQ0FBQ1ksR0FBTixDQUFVQyxLQUhOLEVBSUpiLEtBQUssQ0FBQ1ksR0FBTixDQUFVRSxHQUpOLENBQU47QUFNRDs7QUFFRCxXQUFPO0FBQ0xKLE1BQUFBLElBQUksRUFBRSxZQUREO0FBRUxLLE1BQUFBLElBQUksRUFBRWYsS0FBSyxDQUFDZ0I7QUFGUCxLQUFQO0FBSUQsR0FkTSxDQUFQO0FBZUQ7O0FBRUQsU0FBU1YsV0FBVCxDQUNFUCxDQURGLEVBRUVFLElBRkYsRUFHbUI7QUFDakIsU0FBT0YsQ0FBQyxDQUFDVSxTQUFGLENBQVlWLENBQUMsQ0FBQ1MsSUFBRixFQUFaLEVBQXNCLENBQUM7QUFBRVIsSUFBQUE7QUFBRixHQUFELEtBQWU7QUFDMUMsVUFBTWlCLE1BQU0sR0FBR2xCLENBQUMsQ0FBQ1UsU0FBRixDQUFZVCxLQUFaLEVBQW1CLE9BQU87QUFDdkNVLE1BQUFBLElBQUksRUFBRSxZQURpQztBQUV2Q0ssTUFBQUEsSUFBSSxFQUFFZixLQUFLLENBQUNnQjtBQUYyQixLQUFQLENBQW5CLENBQWY7QUFLQSxXQUFPO0FBQ0xOLE1BQUFBLElBQUksRUFBRSxRQUREO0FBRUxULE1BQUFBLElBRks7QUFHTGdCLE1BQUFBLE1BSEs7QUFJTEwsTUFBQUEsR0FBRyxFQUFFO0FBQ0hDLFFBQUFBLEtBQUssRUFBRVosSUFBSSxDQUFDVyxHQUFMLENBQVNDLEtBRGI7QUFFSEMsUUFBQUEsR0FBRyxFQUFFRyxNQUFNLENBQUNMLEdBQVAsQ0FBV0U7QUFGYjtBQUpBLEtBQVA7QUFTRCxHQWZNLENBQVA7QUFnQkQ7O0FBRUQsU0FBU1AsY0FBVCxDQUNFUixDQURGLEVBRUVFLElBRkYsRUFHc0I7QUFDcEIsU0FBT0YsQ0FBQyxDQUFDVSxTQUFGLENBQVlWLENBQUMsQ0FBQ1MsSUFBRixFQUFaLEVBQXNCLENBQUM7QUFBRVIsSUFBQUE7QUFBRixHQUFELEtBQWU7QUFDMUMsVUFBTWUsSUFBSSxHQUFHaEIsQ0FBQyxDQUFDVSxTQUFGLENBQVlULEtBQVosRUFBbUIsT0FBTztBQUNyQ1UsTUFBQUEsSUFBSSxFQUFFLFlBRCtCO0FBRXJDSyxNQUFBQSxJQUFJLEVBQUVmLEtBQUssQ0FBQ2dCO0FBRnlCLEtBQVAsQ0FBbkIsQ0FBYjtBQUtBLFdBQU87QUFDTE4sTUFBQUEsSUFBSSxFQUFFLFdBREQ7QUFFTFQsTUFBQUEsSUFGSztBQUdMYyxNQUFBQSxJQUhLO0FBSUxILE1BQUFBLEdBQUcsRUFBRTtBQUNIQyxRQUFBQSxLQUFLLEVBQUVaLElBQUksQ0FBQ1csR0FBTCxDQUFTQyxLQURiO0FBRUhDLFFBQUFBLEdBQUcsRUFBRUMsSUFBSSxDQUFDSCxHQUFMLENBQVNFO0FBRlg7QUFKQSxLQUFQO0FBU0QsR0FmTSxDQUFQO0FBZ0JEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSAnLi4nXG5pbXBvcnQgeyBJZGVudGlmaWVyLCBNZW1iZXIsIExvY2F0ZWQsIFZhbHVlUGFpciB9IGZyb20gJy4uLy4uL25vZGVzJ1xuaW1wb3J0IHsgVG9rZW4gfSBmcm9tICcuLi90b2tlbml6ZXInXG5pbXBvcnQgeyBpc1Rva2VuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdG9rZW4nXG5pbXBvcnQgeyBjcmVhdGVFcnJvciB9IGZyb20gJy4uL2NyZWF0ZS1lcnJvcidcblxudHlwZSBJZCA9IE1lbWJlciB8IFZhbHVlUGFpciB8IElkZW50aWZpZXJcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSWQoXG4gIHA6IFBhcnNlcixcbiAgdG9rZW4/OiBUb2tlbixcbiAgYmFzZTogTG9jYXRlZDxFeGNsdWRlPElkLCBWYWx1ZVBhaXI+PiA9IHBhcnNlSWRlbnRpZmllcihwLCB0b2tlbilcbik6IExvY2F0ZWQ8SWQ+IHtcbiAgaWYgKGlzVG9rZW4ocC5wZWVrKCksICdzeW1ib2wnLCAnLicpKSB7XG4gICAgcC50YWtlKClcbiAgICByZXR1cm4gcGFyc2VJZChwLCB1bmRlZmluZWQsIHBhcnNlTWVtYmVyKHAsIGJhc2UpKVxuICB9XG5cbiAgaWYgKGlzVG9rZW4ocC5wZWVrKCksICdzeW1ib2wnLCAnOicpKSB7XG4gICAgcC50YWtlKClcbiAgICAvLyByZXR1cm4gdGhlIGV4cHJlc3Npb24gaGVyZSBiZWNhdXNlIHRoZXJlIHdvbid0IGJlIGFueSByZWN1cnNpdmUgcGF0dGVyblxuICAgIHJldHVybiBwYXJzZVZhbHVlUGFpcihwLCBiYXNlKVxuICB9XG5cbiAgcmV0dXJuIGJhc2Vcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSWRlbnRpZmllcihcbiAgcDogUGFyc2VyLFxuICB0b2tlbjogVG9rZW4gPSBwLnJlYWQoKVxuKTogTG9jYXRlZDxJZGVudGlmaWVyPiB7XG4gIHJldHVybiBwLnBhcnNlTm9kZSh0b2tlbiwgKCkgPT4ge1xuICAgIGlmICh0b2tlbi50eXBlICE9PSAnaWRlbnQnKSB7XG4gICAgICB0aHJvdyBjcmVhdGVFcnJvcihcbiAgICAgICAgcC5zb3VyY2UsXG4gICAgICAgICdFeHBlY3RlZCBvbmUgb2YgW0lkZW50aWZpZXJdJyxcbiAgICAgICAgdG9rZW4ubG9jLnN0YXJ0LFxuICAgICAgICB0b2tlbi5sb2MuZW5kXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcbiAgICAgIG5hbWU6IHRva2VuLnZhbHVlLFxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcGFyc2VNZW1iZXIoXG4gIHA6IFBhcnNlcixcbiAgYmFzZTogTG9jYXRlZDxFeGNsdWRlPElkLCBWYWx1ZVBhaXI+PlxuKTogTG9jYXRlZDxNZW1iZXI+IHtcbiAgcmV0dXJuIHAucGFyc2VOb2RlKHAucmVhZCgpLCAoeyB0b2tlbiB9KSA9PiB7XG4gICAgY29uc3QgbWVtYmVyID0gcC5wYXJzZU5vZGUodG9rZW4sICgpID0+ICh7XG4gICAgICB0eXBlOiAnSWRlbnRpZmllcicsXG4gICAgICBuYW1lOiB0b2tlbi52YWx1ZSxcbiAgICB9KSlcblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnTWVtYmVyJyxcbiAgICAgIGJhc2UsXG4gICAgICBtZW1iZXIsXG4gICAgICBsb2M6IHtcbiAgICAgICAgc3RhcnQ6IGJhc2UubG9jLnN0YXJ0LFxuICAgICAgICBlbmQ6IG1lbWJlci5sb2MuZW5kLFxuICAgICAgfSxcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHBhcnNlVmFsdWVQYWlyKFxuICBwOiBQYXJzZXIsXG4gIGJhc2U6IExvY2F0ZWQ8RXhjbHVkZTxJZCwgVmFsdWVQYWlyPj5cbik6IExvY2F0ZWQ8VmFsdWVQYWlyPiB7XG4gIHJldHVybiBwLnBhcnNlTm9kZShwLnJlYWQoKSwgKHsgdG9rZW4gfSkgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSBwLnBhcnNlTm9kZSh0b2tlbiwgKCkgPT4gKHtcbiAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcbiAgICAgIG5hbWU6IHRva2VuLnZhbHVlLFxuICAgIH0pKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdWYWx1ZVBhaXInLFxuICAgICAgYmFzZSxcbiAgICAgIG5hbWUsXG4gICAgICBsb2M6IHtcbiAgICAgICAgc3RhcnQ6IGJhc2UubG9jLnN0YXJ0LFxuICAgICAgICBlbmQ6IG5hbWUubG9jLmVuZCxcbiAgICAgIH0sXG4gICAgfVxuICB9KVxufVxuIl19
