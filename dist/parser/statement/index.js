'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.parseStmt = parseStmt

var _token = require('../../utils/token')

var _expression = require('../expression')

var _createError = require('../create-error')

var _keywords = require('../keywords')

var _ip = require('./ip')

var _compound = require('../compound')

var _identifier = require('../expression/identifier')

var _literal = require('../literal')

const ensureSemi = (p) => p.validateToken(p.read(), 'symbol', ';')

function parseStmt(p, token = p.read()) {
  if (!_keywords.keywords.has(token.value)) {
    return p.parseNode(token, () => {
      const body = (0, _expression.parseExpr)(p, token)
      ensureSemi(p)
      return {
        type: 'ExpressionStatement',
        body,
      }
    })
  }

  if (token.value === 'set' || token.value === 'add') {
    return p.parseNode(token, () => {
      const left = (0, _identifier.parseId)(p)
      const operator = p.validateToken(p.read(), 'operator').value
      const right = (0, _expression.parseExpr)(p)
      ensureSemi(p)
      const type = token.value === 'add' ? 'AddStatement' : 'SetStatement'
      return {
        type,
        left,
        right,
        operator,
      }
    })
  }

  if (token.value === 'unset') {
    return p.parseNode(token, () => {
      const id = (0, _identifier.parseId)(p)
      ensureSemi(p)
      return {
        type: 'UnsetStatement',
        id,
      }
    })
  }

  if (token.value === 'include') {
    return p.parseNode(token, () => {
      const moduleToken = p.read()
      const module = (0, _literal.parseLiteral)(p, moduleToken)

      if (!(module && module.type === 'StringLiteral')) {
        throw (0, _createError.createError)(
          p.source,
          'Expected one of [StringLiteral]',
          moduleToken.loc.start,
          moduleToken.loc.end
        )
      }

      ensureSemi(p)
      return {
        type: 'IncludeStatement',
        module: p.validateNode(module, 'StringLiteral'),
      }
    })
  }

  if (token.value === 'import') {
    return p.parseNode(token, () => {
      const module = (0, _identifier.parseIdentifier)(p)
      ensureSemi(p)
      return {
        type: 'ImportStatement',
        module,
      }
    })
  }

  if (token.value === 'call') {
    return p.parseNode(token, () => {
      const subroutine = (0, _identifier.parseIdentifier)(p)
      ensureSemi(p)
      return {
        type: 'CallStatement',
        subroutine,
      }
    })
  }

  if (token.value === 'declare') {
    return p.parseNode(token, () => {
      p.validateToken(p.read(), 'ident', 'local')
      const id = p.validateNode(
        (0, _identifier.parseId)(p, p.read()),
        'Identifier',
        'Member'
      )
      const valueType = p.validateToken(p.read(), 'ident').value
      ensureSemi(p)
      return {
        type: 'DeclareStatement',
        id,
        valueType,
      }
    })
  }

  if (token.value === 'return') {
    return p.parseNode(token, () => {
      let returnActionToken // `()` can be skipped

      if ((0, _token.isToken)(p.peek(), 'symbol', '(')) {
        p.take()
        returnActionToken = p.read()
        p.validateToken(p.read(), 'symbol', ')')
      } else {
        returnActionToken = p.read()
      }

      if (!_keywords.returnActions.has(returnActionToken.value)) {
        throw (0, _createError.createError)(
          p.source,
          'return action should be one of ' +
            Array.from(_keywords.returnActions.values()).join(', '),
          returnActionToken.loc.start,
          returnActionToken.loc.end
        )
      }

      const action = returnActionToken.value
      ensureSemi(p)
      return {
        type: 'ReturnStatement',
        action,
      }
    })
  }

  if (token.value === 'error') {
    return p.parseNode(token, () => {
      const status = Number(p.validateToken(p.read(), 'numeric').value) // `message` can be void

      if ((0, _token.isToken)(p.peek(), 'symbol', ';')) {
        p.take()
        return {
          type: 'ErrorStatement',
          status,
          message: undefined,
        }
      }

      const message = (0, _expression.parseExpr)(p)
      ensureSemi(p)
      return {
        type: 'ErrorStatement',
        status,
        message,
      }
    })
  }

  if (token.value === 'restart') {
    return p.parseNode(token, () => {
      ensureSemi(p)
      return {
        type: 'RestartStatement',
      }
    })
  }

  if (token.value === 'synthetic') {
    return p.parseNode(token, () => {
      const response = (0, _expression.parseExpr)(p)
      ensureSemi(p)
      return {
        type: 'SyntheticStatement',
        response,
      }
    })
  }

  if (token.value === 'log') {
    return p.parseNode(token, () => {
      const content = (0, _expression.parseExpr)(p)
      ensureSemi(p)
      return {
        type: 'LogStatement',
        content,
      }
    })
  }

  if (token.value === 'if') {
    return parseIfStatement(p, token)
  }

  if (token.value === 'sub') {
    return p.parseNode(token, () => {
      const id = (0, _identifier.parseIdentifier)(p)
      p.validateToken(p.read(), 'symbol', '{')
      const body = (0, _compound.parseCompound)(p, parseStmt, {
        until: '}',
      })
      return {
        type: 'SubroutineStatement',
        id,
        body,
      }
    })
  }

  if (token.value === 'acl') {
    return p.parseNode(token, () => {
      const id = (0, _identifier.parseIdentifier)(p)
      p.validateToken(p.read(), 'symbol', '{')
      const body = (0, _compound.parseCompound)(p, _ip.parseIp, {
        until: '}',
        semi: true,
      })
      return {
        type: 'AclStatement',
        id,
        body,
      }
    })
  }

  if (token.value === 'backend') {
    return p.parseNode(token, () => {
      const id = (0, _identifier.parseIdentifier)(p)
      p.validateToken(p.read(), 'symbol', '{')
      const body = (0, _compound.parseCompound)(p, parseBackendDef, {
        until: '}',
      })
      return {
        type: 'BackendStatement',
        id,
        body,
      }
    })
  }

  if (token.value === 'table') {
    return parseTableStatement(p, token)
  }

  if (token.value === 'director') {
    return parseDirectorStatement(p, token)
  }

  throw (0, _createError.createError)(
    p.source,
    'Statement not implemented yet',
    token.loc.start,
    token.loc.end
  )
}

function parseBackendDef(p, token = p.read()) {
  return p.parseNode(token, () => {
    p.validateToken(token, 'symbol', '.')
    const key = p.validateNode((0, _expression.parseExpr)(p), 'Identifier').name
    p.validateToken(p.read(), 'operator', '=')
    let value

    if ((0, _token.isToken)(p.peek(), 'symbol', '{')) {
      p.take()
      value = (0, _compound.parseCompound)(p, parseBackendDef, {
        until: '}',
      })
    } else {
      value = (0, _expression.parseExpr)(p)
      ensureSemi(p)
    }

    return {
      type: 'BackendDefinition',
      key,
      value,
    }
  })
}

function parseIfStatement(p, token = p.read()) {
  return p.parseNode(token, () => {
    p.validateToken(p.read(), 'symbol', '(')
    const test = (0, _expression.parseExpr)(p)
    p.validateToken(p.read(), 'symbol', ')')
    p.validateToken(p.read(), 'symbol', '{')
    const consequent = (0, _compound.parseCompound)(p, parseStmt, {
      until: '}',
    })
    let alternative = undefined
    const next = p.peek()

    if ((0, _token.isToken)(next, 'ident', /elsif|elseif/)) {
      alternative = parseIfStatement(p, p.read())
    } else if ((0, _token.isToken)(next, 'ident', 'else')) {
      p.take()

      if ((0, _token.isToken)(p.peek(), 'ident', 'if')) {
        alternative = parseIfStatement(p, p.read())
      } else {
        p.validateToken(p.read(), 'symbol', '{')
        alternative = (0, _compound.parseCompound)(p, parseStmt, {
          until: '}',
        })
      }
    }

    return {
      type: 'IfStatement',
      test,
      consequent,
      alternative,
    }
  })
}

function parseTableDef(p, token = p.read()) {
  return p.parseNode(token, () => {
    const key = p.validateToken(token, 'string').value
    p.validateToken(p.read(), 'symbol', ':')
    const value = p.validateToken(p.read(), 'string').value

    if ((0, _token.isToken)(p.peek(), 'symbol', ',')) {
      p.take()
    }

    return {
      type: 'TableDefinition',
      key,
      value,
    }
  })
}

function parseTableStatement(p, token = p.read()) {
  return p.parseNode(token, () => {
    const id = p.validateNode(
      (0, _identifier.parseId)(p, p.read()),
      'Identifier'
    )
    p.validateToken(p.read(), 'symbol', '{')
    const body = (0, _compound.parseCompound)(p, parseTableDef, {
      until: '}',
    })
    return {
      type: 'TableStatement',
      id,
      body,
    }
  })
}

function parseDirectorStatement(p, token = p.read()) {
  return p.parseNode(token, () => {
    const id = p.validateNode((0, _identifier.parseId)(p), 'Identifier')
    const directorType = p.validateNode(
      (0, _identifier.parseId)(p),
      'Identifier'
    )
    p.validateToken(p.read(), 'symbol', '{')
    const body = (0, _compound.parseCompound)(
      p,
      (p, token) => {
        if (token.value === '{') {
          const attributes = (0, _compound.parseCompound)(
            p,
            (p, token) => {
              p.validateToken(token, 'symbol', '.')
              const key = p.read().value
              p.validateToken(p.read(), 'operator', '=')
              const value = p.read().value
              ensureSemi(p)
              return {
                key,
                value,
              }
            },
            {
              until: '}',
            }
          )
          const backend = attributes.shift()
          if (
            (backend === null || backend === void 0 ? void 0 : backend.key) !==
            'backend'
          )
            // TODO: use general-purpose validate function
            throw new Error('No backend name specified')
          return {
            backend: backend.value,
            attributes,
          }
        }

        p.validateToken(token, 'symbol', '.')
        const key = p.read().value
        p.validateToken(p.read(), 'operator', '=')
        const value = p.read().value
        ensureSemi(p)
        return {
          key,
          value,
        }
      },
      {
        until: '}',
      }
    ).filter(Boolean)
    return {
      type: 'DirectorStatement',
      id,
      directorType,
      body,
    }
  })
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
