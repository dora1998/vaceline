'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.parseLiteral = parseLiteral

var _createError = require('./create-error')

var _token = require('../utils/token')

var _ip = require('./statement/ip')

function parseLiteral(p, token = p.read()) {
  if (token.type === 'boolean') {
    return p.parseNode(token, () => ({
      type: 'BooleanLiteral',
      value: token.value,
    }))
  }

  if (token.type === 'string') {
    if ((0, _token.isToken)(p.peek(), 'symbol', '/')) {
      return (0, _ip.parseIp)(p, token)
    }

    return p.parseNode(token, () => ({
      type: 'StringLiteral',
      value: token.value,
    }))
  }

  if (token.type === 'numeric') {
    if ((0, _token.isToken)(p.peek(), 'ident', /ms|s|m|h|d|y/)) {
      return p.parseNode(token, () => ({
        type: 'DurationLiteral',
        value: token.value + p.read().value,
      }))
    }

    if (!Number.isNaN(Number(token.value))) {
      if (
        token.value.startsWith('.') ||
        (token.value.length !== 1 && token.value.startsWith('0'))
      ) {
        throw (0, _createError.createError)(
          p.source,
          'Invalid number',
          token.loc.start,
          token.loc.end
        )
      }

      return p.parseNode(token, () => ({
        type: 'NumericLiteral',
        value: token.value,
      }))
    }

    throw (0, _createError.createError)(
      p.source,
      'Invalid token',
      token.loc.start,
      token.loc.end
    )
  }

  return null
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvbGl0ZXJhbC50cyJdLCJuYW1lcyI6WyJwYXJzZUxpdGVyYWwiLCJwIiwidG9rZW4iLCJyZWFkIiwidHlwZSIsInBhcnNlTm9kZSIsInZhbHVlIiwicGVlayIsIk51bWJlciIsImlzTmFOIiwic3RhcnRzV2l0aCIsImxlbmd0aCIsInNvdXJjZSIsImxvYyIsInN0YXJ0IiwiZW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0E7O0FBRUE7O0FBQ0E7O0FBRU8sU0FBU0EsWUFBVCxDQUNMQyxDQURLLEVBRUxDLEtBQVksR0FBR0QsQ0FBQyxDQUFDRSxJQUFGLEVBRlYsRUFHb0I7QUFDekIsTUFBSUQsS0FBSyxDQUFDRSxJQUFOLEtBQWUsU0FBbkIsRUFBOEI7QUFDNUIsV0FBT0gsQ0FBQyxDQUFDSSxTQUFGLENBQVlILEtBQVosRUFBbUIsT0FBTztBQUMvQkUsTUFBQUEsSUFBSSxFQUFFLGdCQUR5QjtBQUUvQkUsTUFBQUEsS0FBSyxFQUFFSixLQUFLLENBQUNJO0FBRmtCLEtBQVAsQ0FBbkIsQ0FBUDtBQUlEOztBQUVELE1BQUlKLEtBQUssQ0FBQ0UsSUFBTixLQUFlLFFBQW5CLEVBQTZCO0FBQzNCLFFBQUksb0JBQVFILENBQUMsQ0FBQ00sSUFBRixFQUFSLEVBQWtCLFFBQWxCLEVBQTRCLEdBQTVCLENBQUosRUFBc0M7QUFDcEMsYUFBTyxpQkFBUU4sQ0FBUixFQUFXQyxLQUFYLENBQVA7QUFDRDs7QUFFRCxXQUFPRCxDQUFDLENBQUNJLFNBQUYsQ0FBWUgsS0FBWixFQUFtQixPQUFPO0FBQy9CRSxNQUFBQSxJQUFJLEVBQUUsZUFEeUI7QUFFL0JFLE1BQUFBLEtBQUssRUFBRUosS0FBSyxDQUFDSTtBQUZrQixLQUFQLENBQW5CLENBQVA7QUFJRDs7QUFFRCxNQUFJSixLQUFLLENBQUNFLElBQU4sS0FBZSxTQUFuQixFQUE4QjtBQUM1QixRQUFJLG9CQUFRSCxDQUFDLENBQUNNLElBQUYsRUFBUixFQUFrQixPQUFsQixFQUEyQixjQUEzQixDQUFKLEVBQWdEO0FBQzlDLGFBQU9OLENBQUMsQ0FBQ0ksU0FBRixDQUFZSCxLQUFaLEVBQW1CLE9BQU87QUFDL0JFLFFBQUFBLElBQUksRUFBRSxpQkFEeUI7QUFFL0JFLFFBQUFBLEtBQUssRUFBRUosS0FBSyxDQUFDSSxLQUFOLEdBQWNMLENBQUMsQ0FBQ0UsSUFBRixHQUFTRztBQUZDLE9BQVAsQ0FBbkIsQ0FBUDtBQUlEOztBQUVELFFBQUksQ0FBQ0UsTUFBTSxDQUFDQyxLQUFQLENBQWFELE1BQU0sQ0FBQ04sS0FBSyxDQUFDSSxLQUFQLENBQW5CLENBQUwsRUFBd0M7QUFDdEMsVUFDRUosS0FBSyxDQUFDSSxLQUFOLENBQVlJLFVBQVosQ0FBdUIsR0FBdkIsS0FDQ1IsS0FBSyxDQUFDSSxLQUFOLENBQVlLLE1BQVosS0FBdUIsQ0FBdkIsSUFBNEJULEtBQUssQ0FBQ0ksS0FBTixDQUFZSSxVQUFaLENBQXVCLEdBQXZCLENBRi9CLEVBR0U7QUFDQSxjQUFNLDhCQUNKVCxDQUFDLENBQUNXLE1BREUsRUFFSixnQkFGSSxFQUdKVixLQUFLLENBQUNXLEdBQU4sQ0FBVUMsS0FITixFQUlKWixLQUFLLENBQUNXLEdBQU4sQ0FBVUUsR0FKTixDQUFOO0FBTUQ7O0FBRUQsYUFBT2QsQ0FBQyxDQUFDSSxTQUFGLENBQVlILEtBQVosRUFBbUIsT0FBTztBQUMvQkUsUUFBQUEsSUFBSSxFQUFFLGdCQUR5QjtBQUUvQkUsUUFBQUEsS0FBSyxFQUFFSixLQUFLLENBQUNJO0FBRmtCLE9BQVAsQ0FBbkIsQ0FBUDtBQUlEOztBQUVELFVBQU0sOEJBQVlMLENBQUMsQ0FBQ1csTUFBZCxFQUFzQixlQUF0QixFQUF1Q1YsS0FBSyxDQUFDVyxHQUFOLENBQVVDLEtBQWpELEVBQXdEWixLQUFLLENBQUNXLEdBQU4sQ0FBVUUsR0FBbEUsQ0FBTjtBQUNEOztBQUVELFNBQU8sSUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGl0ZXJhbCwgTG9jYXRlZCB9IGZyb20gJy4uL25vZGVzJ1xuXG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gJy4vdG9rZW5pemVyJ1xuaW1wb3J0IHsgY3JlYXRlRXJyb3IgfSBmcm9tICcuL2NyZWF0ZS1lcnJvcidcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gJy4nXG5pbXBvcnQgeyBpc1Rva2VuIH0gZnJvbSAnLi4vdXRpbHMvdG9rZW4nXG5pbXBvcnQgeyBwYXJzZUlwIH0gZnJvbSAnLi9zdGF0ZW1lbnQvaXAnXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUxpdGVyYWwoXG4gIHA6IFBhcnNlcixcbiAgdG9rZW46IFRva2VuID0gcC5yZWFkKClcbik6IExvY2F0ZWQ8TGl0ZXJhbD4gfCBudWxsIHtcbiAgaWYgKHRva2VuLnR5cGUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBwLnBhcnNlTm9kZSh0b2tlbiwgKCkgPT4gKHtcbiAgICAgIHR5cGU6ICdCb29sZWFuTGl0ZXJhbCcsXG4gICAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgfSkpXG4gIH1cblxuICBpZiAodG9rZW4udHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoaXNUb2tlbihwLnBlZWsoKSwgJ3N5bWJvbCcsICcvJykpIHtcbiAgICAgIHJldHVybiBwYXJzZUlwKHAsIHRva2VuKVxuICAgIH1cblxuICAgIHJldHVybiBwLnBhcnNlTm9kZSh0b2tlbiwgKCkgPT4gKHtcbiAgICAgIHR5cGU6ICdTdHJpbmdMaXRlcmFsJyxcbiAgICAgIHZhbHVlOiB0b2tlbi52YWx1ZSxcbiAgICB9KSlcbiAgfVxuXG4gIGlmICh0b2tlbi50eXBlID09PSAnbnVtZXJpYycpIHtcbiAgICBpZiAoaXNUb2tlbihwLnBlZWsoKSwgJ2lkZW50JywgL21zfHN8bXxofGR8eS8pKSB7XG4gICAgICByZXR1cm4gcC5wYXJzZU5vZGUodG9rZW4sICgpID0+ICh7XG4gICAgICAgIHR5cGU6ICdEdXJhdGlvbkxpdGVyYWwnLFxuICAgICAgICB2YWx1ZTogdG9rZW4udmFsdWUgKyBwLnJlYWQoKS52YWx1ZSxcbiAgICAgIH0pKVxuICAgIH1cblxuICAgIGlmICghTnVtYmVyLmlzTmFOKE51bWJlcih0b2tlbi52YWx1ZSkpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRva2VuLnZhbHVlLnN0YXJ0c1dpdGgoJy4nKSB8fFxuICAgICAgICAodG9rZW4udmFsdWUubGVuZ3RoICE9PSAxICYmIHRva2VuLnZhbHVlLnN0YXJ0c1dpdGgoJzAnKSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBjcmVhdGVFcnJvcihcbiAgICAgICAgICBwLnNvdXJjZSxcbiAgICAgICAgICAnSW52YWxpZCBudW1iZXInLFxuICAgICAgICAgIHRva2VuLmxvYy5zdGFydCxcbiAgICAgICAgICB0b2tlbi5sb2MuZW5kXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHAucGFyc2VOb2RlKHRva2VuLCAoKSA9PiAoe1xuICAgICAgICB0eXBlOiAnTnVtZXJpY0xpdGVyYWwnLFxuICAgICAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgICB9KSlcbiAgICB9XG5cbiAgICB0aHJvdyBjcmVhdGVFcnJvcihwLnNvdXJjZSwgJ0ludmFsaWQgdG9rZW4nLCB0b2tlbi5sb2Muc3RhcnQsIHRva2VuLmxvYy5lbmQpXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuIl19
